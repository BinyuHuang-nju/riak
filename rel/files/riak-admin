#!/bin/sh
# -*- tab-width:4;indent-tabs-mode:nil -*-
# ex: ts=4 sw=4 et

# Keep track of where script was invoked
ORIGINAL_DIR=$(pwd)

# Make sure CWD is set to runner run dir
cd $RUNNER_BASE_DIR

# Identify the script name
SCRIPT=`basename $0`

usage() {
    echo "Usage: $SCRIPT { cluster | join | leave | backup | restore | test | "
    echo "                    reip | js-reload | erl-reload | wait-for-service | "
    echo "                    ringready | transfers | force-remove | down | push |"
    echo "                    cluster-info | member-status | ring-status | vnode-status |"
    echo "                    aae-status | diag | stat | profile | push | status | transfer-limit |"
    echo "                    reformat-indexes | top [-interval N] [-sort reductions|memory|msg_q] [-lines N] |"
    echo "                    downgrade-objects | security | bucket-type | repair-2i |"
    echo "                    search | services | ensemble-status | handoff | set |"
    echo "                    show | describe }"
}

profile_admin()
{
    if [ -n "$2" ]; then
        case "$1" in
            load)
                shift
                relx_nodetool rpc riak_core_console load_profile "$*"
                ;;
            save)
                shift
                relx_nodetool rpc riak_core_console add_profile "$*"
                ;;
            delete)
                shift
                relx_nodetool rpc riak_core_console remove_profile "$*"
                ;;
            reset)
                shift
                relx_nodetool rpc riak_core_console reset_profile "$*"
                ;;
            help)
                shift
                case "$1" in
                        load)
                            profile_load_help
                            ;;
                        save)
                            profile_save_help
                            ;;
                        delete)
                            profile_delete_help
                            ;;
                        reset)
                            profile_reset_help
                            ;;
                        *)
                            profile_help
                esac
                ;;
            *)
                profile_help
        esac

    elif [ -z "$2" ]; then
        echo "No Argument Entered"
    fi

}


stat_admin()
{
    if [ -n "$2" ]; then
        case "$1" in
            show)
                shift
                relx_nodetool rpc riak_core_console stat_show "$*"
                ;;
            show-0)
                shift
                relx_nodetool rpc riak_core_console stat_0 "$*"
                ;;
            disable-0)
                shift
                relx_nodetool rpc riak_core_console stat_disable_0 "$*"
                ;;
            info)
                shift
                relx_nodetool rpc riak_core_console stat_info "$*"
                ;;
            enable)
                shift
                relx_nodetool rpc riak_core_console stat_enable "$*"
                ;;
            disable)
                shift
                relx_nodetool rpc riak_core_console stat_disable "$*"
                ;;
            reset)
                shift
                relx_nodetool rpc riak_core_console stat_reset "$*"
                ;;
            metadata)
                shift
               relx_nodetool rpc riak_core_console stat_metadata "$*"
                ;;
            help)
                shift
                case $1 in
                    show)
                        stat_show_help
                        ;;
                    show-0)
                        stat_show_0_help
                        ;;
                    enable)
                        stat_enable_help
                        ;;
                    disable)
                        stat_enable_help
                        ;;
                    disable-0)
                        stat_disable_0_help
                        ;;
                    info)
                        stat_info_help
                        ;;
                    reset)
                        stat_reset_help
                        ;;
                    metadata)
                        stat_metadata_help
                        ;;
                    *)
                        stat_help
                esac
                ;;
            *)
                stat_help
        esac

    elif [ -z "$2" ]; then
        echo "No Argument Entered"
    fi
}

push_admin()
{
    if [ -n "$2" ]; then
         case "$1" in
              setup)
                  shift
                  relx_nodetool rpc riak_core_console setup_endpoint "$*"
                  ;;
              setdown)
                  shift
                  relx_nodetool rpc riak_core_console setdown_endpoint "$*"
                  ;;
              info)
                  shift
                  relx_nodetool rpc riak_core_console find_push_stats "$*"
                  ;;
              info-all)
                  shift
                  relx_nodetool rpc riak_core_console find_push_stats_all "$*"
                  ;;
              help)
                  shift
                  case "$1" in
                      setup)
                          push_setup_help
                          ;;
                      setdown)
                          push_setdown_help
                          ;;
                      info)
                          push_info_help
                          ;;
                      *)
                          push_help
                          ;;
                  esac
                  ;;
              *)
                  push_help
          esac

    elif [ -z "$2" ]; then
          echo "No Argument Entered"
    fi
}


stat_help()
{
    echo "\

    Usage: $SCRIPT admin stat <command>

    The following commands display, enable/disable and reset statistics.
    A statistics entry is given either as a 'dotted' exometer name -
    Identifiers separated by periods, '.', e.g. riak.riak_kv.node.gets,
    or as a 'legacy' name (same as in riak-admin status) - e.g. node_gets.
    When a legacy name is listed, the corresponding exometer name is shown as well.

    Two kinds of wildcard are suppored:
    *  - matches anything up to the next separator ('.' or '_') or end of name;
    ** - matches anything including separators.
    Quoting is permitted.

    Use \`$SCRIPT admin stat help <command>\` for more details.

       show <entry>                Show the value(s) of a specific entry or entries
       show-0 <entry>              Show the entry or entries that are not updating
       disable-0 <entry>           Disable the entry or entries that are not updating
       enable <entry>              Enable entry or entries
       disable <entry>             Disable entry or entries
       reset <entry>               Reset entry or entries
       info [ -name | -type |      Display information about the entry or entries.
            | -module              The attributes are described in the Exometer docs
            | -value | -cache
            | -status | -timestamp
            | -options | -ref
            | -datapoints ] <entry>

       riak_stat Functions :

       Enable the persistence of stats and their configuration, as well as house the profiles
       functionality, gives more control over the use and status of all stats within riak

       metadata <entry>     <entry> :: enable | disable
                                   Enables or disables the metadata in riak_stat, disabling the
                                   metadata will prevent the persistence of stats configuration

"
}

stat_show_help()
{
    echo "\

    Usage: $SCRIPT admin stat show <entry>[/type=<type>][/status=<status>][/<dp>[,<dp>]]

    Show matching stats entries together with corresponding values

    The format of <entry> can be one of:
    - 'Dotted exometer name': In Exometer, entries are represented as [A,B,...].
    These names can be emulated on the command-line as A.B.... Wildcards are
    supported: '*' will match anything between deliminators (dots), whereas
    '**' will match anything including deliminators. Thus \`stat show \"*.**\"\`
    will match all stats entries. All Riak stat entry names start with 'riak',
    so \`stat show riak.**\` will match all riak stat entries.

    Example:
    \$ riak admin stat show riak.riak_kv.node.gets
    [riak,riak_kv,node,gets]: [{count,0},{one,0}]

    - 'Legacy name': The stat names used e.g. in \`$SCRIPT status\` can be used
    here, but also with wildcard support. The corresponding Exometer name and
    datapoint will be shown as well.

    Example:
    \$ riak admin stat show node_gets
    == node_gets (Legacy pattern): ==
    node_gets: 0 ([riak,riak_kv,node,gets]/one)

    (Note: A single '*' is treated as a legacy name and would match all such
    names that contain no underscores; to match all exometer names, a '.' must
    be present, so '*.**' would work as a catch-all expression.)

    Each Exometer entry has a type and a set of datapoints. A filter can be
    given on the command line, selecting only a subset of datapoints:

    \$ riak admin stat show riak.riak_kv.node.gets/one
    [riak,riak_kv,node,gets]: [{one,0}]

    The type can also be restricted:
    \$ riak admin stat show *.**/type=duration/mean,max
    [riak,riak_core,converge_delay]: [{mean,0},{max,0}]
    [riak,riak_core,rebalance_delay]: [{mean,0},{max,0}]

    Note how multiple datapoints are separated by comma (no space).

    Showing disabled entries:
    \$ riak admin stat show riak.riak_kv.node.gets
    No matching stats
    \$ riak admin stat show riak.riak_kv.node.gets/status=*
    [riak,riak_kv,node,gets]: disabled
    \$ riak admin stat show riak.riak_kv.node.gets/status=disabled
    [riak,riak_kv,node,gets]: disabled
"
}

stat_show_0_help()
{
    echo "\

    Usage: $SCRIPT admin stat show-0 <entry>[/type=<type>][/status=<status>]

    Shows the Stats in riak, that are not updating or have a value of 0.

    See 'riak admin stat help show for the formatting of the <entry>,
    this works in the same way.

    Example:

    \$ riak admin stat show-0 riak.**/type=duration
    [riak,riak_core,converge_delay]: [{mean,0},{max,0}]
    [riak,riak_core,rebalance_delay]: [{mean,0},{max,0}]

    "
}

stat_enable_help()
{
    echo "\

    Exometer stats can be disabled and enabled, and this can be done
    using \`$SCRIPT admin stat enable|disable <entry>\`. Disabled entries are not actively
    updated, and have no value.

    The same syntax can be used as in \`stat show\`. The requested action will be
    performed on the matching entries.

    \$ riak admin stat disable node_gets
    == node_gets (Legacy pattern): ==
    [riak,riak_kv,node,gets]: disabled
    \$ riak admin stat enable node_gets
    == node_gets (Legacy pattern): ==
    [riak,riak_kv,node,gets]: enabled

    Wildcards can be used:

    \$ riak admin stat disable riak.riak_kv.node.*
    [riak,riak_kv,node,gets]: disabled
    [riak,riak_kv,node,puts]: disabled
"
}

stat_disable_0_help()
{
    echo "\

    Some stats in exometer might go unused, and will not update often if
    at all. \`$SCRIPT admin stat disable-0\` disables all the stats in exometer
    that are enabled and have not updated at all.

    The same syntax can be used as in \`stat show\`. The requested action will be
    performed on the matching entries, in the same way as \`stat disable\`.

    \$ riak admin stat disable-0 node_gets
    == node_gets (Legacy pattern): ==
    [riak,riak_kv,node,gets]: disabled

    Wildcards can be used:

    \$ riak admin stat disable-0 riak.riak_kv.node.*
    [riak,riak_kv,node,gets]: disabled
    [riak,riak_kv,node,puts]: disabled
"
}


stat_info_help()
{
    echo "\

    Usage: $SCRIPT admin stat info <entry> [-<info> [-<info>]]

    Display Exometer meta-data for matching entries. Type of data can be controlled
    with options:

       info [ -name | -type
            | -module
            | -value | -cache
            | -status | -timestamp
            | -options | -ref
            | -datapoints ] <entry>

    The same entry formats can be used as for all other stat subcommands.

    Example:
    \$ riak admin stat info riak.riak_kv.node.gets
    [riak,riak_kv,node,gets]: name = [riak,riak_kv,node,gets]
                              type = spiral
                              module = exometer_spiral
                              value = disabled
                              cache = 0
                              status = disabled
                              timestamp = undefined
                              options = [{status,disabled}]

    \$ riak admin stat info -type -status riak.riak_kv.node.gets
    [riak,riak_kv,node,gets]: type = spiral
                              status = disabled
"
}

stat_reset_help()
{
    echo "\

    Usage: $SCRIPT admin stat reset <entry>

    Reset matching stat entries. Only enabled entries can be reset.
"
}

stat_metadata_help()
{
    echo "\

    Usage $SCRIPT admin stat metadata <entry>=enable|disable|status

    Enable or Disable the persistence of stat options and configuration in
    the metadata. Disabling would mean the status of the stat, i.e. whether
    it is enabled or disabled would not be persisted, meaning on reboot the
    stat will be enabled as default.

"
}

profile_help()
{
    echo "\

    Usage: $SCRIPT admin profile <entry>[<entry>]

    Profiles are the specific set up of stats, whether - enabled,
    disabled or unregistered, it is recorded in the profile upon saving,
    loading a profile remains persisted after a reboot, saving it in
    the metadata so the exact profile is available to all nodes in the cluster,
    allowing consistency in testing and laziness in setting up.

       load <entry>     Loads the status configuration of stats saved under this
                        profile

       save <entry>     Saves the current configuration of stats and their status in
                        the metadata under <entry>

       delete <entry>   Deletes the entry from the metadata, does not affect the stats

       reset            Resets all the stats to enabled, unloads a profile that is loaded

"
}

profile_load_help()
{
    echo "\

    Usage: $SCRIPT admin profile load <entry>

    Load all the stats in a \`profile\` that have a different status to the
    one in exometer, and record \`profile\` as ''loaded'' in the metadata. upon reboot
    the profile that was loaded on the node last will be ''reloaded''.

    Will load profile that has been saved on a different node, as it is gossiped round
    to the rest of the cluster.

"
}

profile_save_help()
{
    echo "\

    Usage: $SCRIPT admin profile save <entry>

    Takes the string given as the profile's name, saves the currnet configuration of
    stats, i.e. their status - being enabled or disabled, their type and how many times
    they have been reset (This option is also recorded in exometer but it is not persisted)

    If the profile name entered is the same as another profile in the metadata it will
    be overwritten. - Best to load the profile first top check. If that profile name does
    not exist, you're in the clear.

"
}

profile_delete_help()
{
    echo "\

    Usage: $SCRIPT admin profile delete <entry>

    Deletes the Profile from the metadata for all nodes in the cluster. If the profile is
    loaded on another node it will not effect it. If it is loaded on this node it will ''unload''
    it but not change any configuration of stats.

"
}

profile_reset_help()
{
    echo "\

    Usage: $SCRIPT admin profile reset <entry>

    Remove the currently loaded profile, and re-enable the stats that were disabled by that profile.
    The profile isn't deleted.

"
}

push_help()
{
    echo "\

    Setup an endpoint with udp or tcp in order to poll the stats in exometer and send to an endpoint.

    setup     <entry> [opts] similar to stat enable <entry>, setting up requires
                           the port number e.g. 8080, serverip == sip, and protocol
                           <entry> -> protocol=udp,port=8080,sip=127.0.0.1 for example
                           Use setup-port to change ports as well as restarting a port,
                           Specific stats can be chosen to be pushed, otherwise the
                           default will poll all stats in exometer.

                           opts ::  protocol= udp | tcp
                                    port=<entry>
                                    instance=<entry>
                                    sip<entry>

    setdown   <entry>      <entry> can be same as above, closes the socket for that protocol

    info      <entry>      <entry> can also be the same as above, works in a similar
                           way to riak stat show, to find the information based
                           on protocol, instance or whether it is still running etc.

    info-all  <entry>      Used the same as above but will return information on all nodes"
}

push_setup_help()
{
    echo "\

    Usage: $SCRIPT admin push setup <entry> protocol=<protocol>,
                                            port=<port>,
                                            instance=<instance>,
                                            sip=<serverip>
                                            [/stats=<stat-entry>]

    Setup polling from node to endpoint; protocol, port, instance and serverip/hostname
    must be given, stats are optional, default : riak.** (all stats in riak).

    <protocol> :: tcp | udp                 (http not supported)
    <port>     :: 0..65535
    <instance> :: Server instance
    <serverip> :: IP address / hostname
    For the formatting on <stat-entry> see \`riak admin stat help show\` for more details.

    Example:
    \$ riak admin push setup protocol=tcp,port=9090,sip=127.0.0.1,instance=testingtcp
    Polling Started

    "
}

push_setdown_help()
{
    echo "\

    Usage: $SCRIPT admin push setdown <entry> [protocol=<protocol>]
                                              [,port=<port>]
                                              [,instance=<instance>]
                                              [,sip=<serverip>]

    Setdown polling on the node; protocol, port, instance or serverip/hostname
    must be given, as multiple instances of polling can be running it is better to
    give the instance name if known to be specific to one process.

    <protocol> :: tcp | udp                 (http not supported)
    <port>     :: 0..65535
    <instance> :: Server instance
    <serverip> :: IP address / hostname

    Example: Stopping all tcp polling instances
    \$ riak admin push setdown protocol=tcp
    Polling Stopped for : [<instance>,...]
    Example: Stopping all instances on local IP
    \$ riak admin push setdown sip=127.0.0.1
    Polling Stopped for : [<instance>,...]
    Example: Stopping Polling using instance name
    \$ riak admin push setdown instance=testingtcp
    Polling Stopped for: testingtcp

    "
}
push_info_help()
{
    echo "\

    Usage: $SCRIPT admin push info <entry> [protocol=<protocol>]
                                           [,port=<port>]
                                           [,instance=<instance>]
                                           [,sip=<serverip>]
                                           [/stats=<stat-entry>]

    find all the instances of the options given, works in a similar way
    to \`riak admin stat show\` and \`riak admin stat info\`.

    Protocol has to be entered. If the protocol does not matter then * can be used.
    The other options are optional. The Dates and times of when the instance was
    started is displayed as well as if it is still running.

    <protocol> :: tcp | udp | *            (http not supported)
    <port>     :: 0..65535
    <instance> :: Server instance
    <serverip> :: IP address / hostname
    For the formatting on <stat-entry> see \`riak admin stat help show\` for more details.

    Example: finding tcp protocols
    \$ riak admin push info protocol=tcp
    Example: finding instances on port 8000
    \$ riak admin push info protocol=*,port=8000
    Example: finding instances on run locally for udp
    \$ riak admin push info protocol=udp,sip=127.0.0.1

    "
}


cluster_admin()
{
    case "$1" in
        join)
            if [ $# -ne 2 ]; then
                echo "Usage: $SCRIPT cluster join <node>"
                exit 1
            fi
            relx_nodetool rpc riak_kv_console staged_join "$2"
            ;;
        leave)
            if [ $# -eq 1 ]; then
                relx_nodetool rpc riak_core_console stage_leave
            elif [ $# -eq 2 ]; then
                relx_nodetool rpc riak_core_console stage_leave "$2"
            else
                echo "Usage: $SCRIPT cluster leave [<node>]"
                exit 1
            fi
            ;;
        force-remove)
            if [ $# -ne 2 ]; then
                echo "Usage: $SCRIPT cluster force-remove <node>"
                exit 1
            fi
            relx_nodetool rpc riak_core_console stage_remove "$2"
            ;;
        replace)
            if [ $# -ne 3 ]; then
                echo "Usage: $SCRIPT cluster replace <node1> <node2>"
                exit 1
            fi
            relx_nodetool rpc riak_core_console stage_replace "$2" "$3"
            ;;
        force-replace)
            if [ $# -ne 3 ]; then
                echo "Usage: $SCRIPT cluster force-replace <node1> <node2>"
                exit 1
            fi
            relx_nodetool rpc riak_core_console stage_force_replace "$2" "$3"
            ;;
        resize-ring)
            if [ $# -ne 2 ]; then
                echo "Usage: $SCRIPT cluster resize-ring <new-ring-size>"
                echo "       $SCRIPT cluster resize-ring abort"
                exit 1
            fi
            relx_nodetool rpc riak_core_console stage_resize_ring "$2"
            ;;
        plan)
            relx_nodetool rpc riak_core_console print_staged
            ;;
        commit)
            relx_nodetool rpc riak_core_console commit_staged
            ;;
        clear)
            relx_nodetool rpc riak_core_console clear_staged
            ;;
        status)
            echo "script: $SCRIPT / $@"
            relx_nodetool rpc riak_core_console command "$SCRIPT-admin" cluster $@
            ;;
        partitions|partition)
            relx_nodetool rpc riak_core_console command "$SCRIPT-admin" cluster $@
            ;;
        partition[_-]count)
            shift
            relx_nodetool rpc riak_core_console command "$SCRIPT-admin" cluster partition-count $@
            ;;
        *)
            echo "\
Usage: $SCRIPT cluster <command>

The following commands stage changes to cluster membership. These commands
do not take effect immediately. After staging a set of changes, the staged
plan must be committed to take effect:

   join <node>                     Join node to the cluster containing <node>
   leave                           Have this node leave the cluster and shutdown
   leave <node>                    Have <node> leave the cluster and shutdown

   force-remove <node>             Remove <node> from the cluster without
                                   first handing off data. Designed for
                                   crashed, unrecoverable nodes

   replace <node1> <node2>         Have <node1> transfer all data to <node2>,
                                   and then leave the cluster and shutdown

   force-replace <node1> <node2>   Reassign all partitions owned by <node1> to
                                   <node2> without first handing off data, and
                                   remove <node1> from the cluster.

Staging commands:
   plan                            Display the staged changes to the cluster
   commit                          Commit the staged changes
   clear                           Clear the staged changes

Status and information commands:
   status                          Display a concise summary of node membership
                                   availability and ring ownership.

   partitions [--node=<node>]      Print primary, secondary and stopped
                                   partition indices and ids for the current
                                   node, or for the specified node.

   partition-count [--node=<node>] Print the cluster-wide number of
                                   partitions or the number of partitions
                                   on the specified node.

   partition id=<id>               Convert the given partition id to the
                                   matching index.

   partition index=<index>         Convert the given partition index to
                                   the matching id.

"
    esac
}

security_admin()
{
    case "$1" in
        add-user)
            shift
            if [ $# -lt 1 ]; then
                echo "Usage: $SCRIPT security add-user <user> [<option>=<value> [...]]"
                exit 1
            fi
            relx_nodetool rpc riak_core_console add_user "$@"
            if [ $? -eq 0 ]; then
                relx_nodetool rpc riak_core_console print_user "$1"
            fi
            ;;
        add-group)
            shift
            if [ $# -lt 1 ]; then
                echo "Usage: $SCRIPT security add-group <group> [<option>=<value> [...]]"
                exit 1
            fi
            relx_nodetool rpc riak_core_console add_group "$@"
            if [ $? -eq 0 ]; then
                relx_nodetool rpc riak_core_console print_group "$1"
            fi
            ;;
        alter-user)
            shift
            if [ $# -lt 2 ]; then
                echo "Usage: $SCRIPT security alter-user <user> <option> [<option>=<value> [...]]"
                exit 1
            fi
            relx_nodetool rpc riak_core_console alter_user "$@"
            if [ $? -eq 0 ]; then
                relx_nodetool rpc riak_core_console print_user "$1"
            fi
            ;;
        alter-group)
            shift
            if [ $# -lt 2 ]; then
                echo "Usage: $SCRIPT security alter-group <group> <option> [<option>=<value> [...]]"
                exit 1
            fi
            relx_nodetool rpc riak_core_console alter_group "$@"
            if [ $? -eq 0 ]; then
                relx_nodetool rpc riak_core_console print_group "$1"
            fi
            ;;
        del-user)
            shift
            if [ $# -ne 1 ]; then
                echo "Usage: $SCRIPT security del-user <user>"
                exit 1
            fi
            relx_nodetool rpc riak_core_console del_user "$@"
            ;;
        del-group)
            shift
            if [ $# -ne 1 ]; then
                echo "Usage: $SCRIPT security del-group <user>"
                exit 1
            fi
            relx_nodetool rpc riak_core_console del_group "$@"
            ;;
        add-source)
            shift
            if [ $# -lt 3 ]; then
                echo "Usage: $SCRIPT security add-source all|<users> <CIDR> <source> [<option>=<value> [...]]"
                exit 1
            fi
            relx_nodetool rpc riak_core_console add_source "$@"
            ;;
        del-source)
            shift
            if [ $# -ne 2 ]; then
                echo "Usage: $SCRIPT security del-source all|<users> <CIDR>"
                exit 1
            fi
            relx_nodetool rpc riak_core_console del_source "$@"
            ;;
        grant)
            shift
            if [ $# -lt 5 ]; then
                echo "Usage: $SCRIPT security grant <permissions> on any|<type> [bucket] to <users>"
                exit 1
            fi
            relx_nodetool rpc riak_core_console grant "$@"
            ;;
        revoke)
            shift
            if [ $# -lt 5 ]; then
                echo "Usage: $SCRIPT security revoke <permissions> on any|<type> [bucket] from <users>"
                exit 1
            fi
            relx_nodetool rpc riak_core_console revoke "$@"
            ;;
        print-users)
            relx_nodetool rpc riak_core_console print_users
            ;;
        print-groups)
            relx_nodetool rpc riak_core_console print_groups
            ;;
        print-sources)
            relx_nodetool rpc riak_core_console print_sources
            ;;
        enable)
            relx_nodetool rpc riak_core_console security_enable
            relx_nodetool rpc riak_core_console security_status
            ;;
        disable)
            relx_nodetool rpc riak_core_console security_disable
            relx_nodetool rpc riak_core_console security_status
            ;;
        status)
            relx_nodetool rpc riak_core_console security_status
            ;;
        print-grants)
            shift
            if [ $# -ne 1 ]; then
                echo "Usage: $SCRIPT security print-grants <user>"
                exit 1
            fi
            relx_nodetool rpc riak_core_console print_grants "$@"
            ;;
        print-user)
            shift
            if [ $# -ne 1 ]; then
                echo "Usage: $SCRIPT security print-user <user>"
                exit 1
            fi
            relx_nodetool rpc riak_core_console print_user "$@"
            ;;
        print-group)
            shift
            if [ $# -ne 1 ]; then
                echo "Usage: $SCRIPT security print-group <group>"
                exit 1
            fi
            relx_nodetool rpc riak_core_console print_group "$@"
            ;;
        ciphers)
            shift
            relx_nodetool rpc riak_core_console ciphers "$@"
            ;;
        *)
            echo "\
Usage: $SCRIPT security <command>

The following commands modify users and security ACLs for Riak:

    add-user <username> [<option>=<value> [...]]
    add-group <groupname> [<option>=<value> [...]]
    alter-user <username> <option> [<option>=<value> [...]]
    alter-group <groupname> <option> [<option>=<value> [...]]
    del-user <username>
    del-group <groupname>
    add-source all|<users> <CIDR> <source> [<option>=<value> [...]]
    del-source all|<users> <CIDR>
    grant <permissions> on any|<type> [bucket] to <users>
    revoke <permissions> on any|<type> [bucket] from <users>
    print-users
    print-groups
    print-user <user>
    print-group <group>
    print-grants <user|group>
    print-sources
    enable
    disable
    status
    ciphers [cipherlist]
"
    esac
}

search_admin()
{
    case "$1" in
        aae[_-]status)
            if [ $# -ne 1 ]; then
                echo "Usage: $SCRIPT search $1"
                exit 1
            fi
            shift

            # Make sure the local node is running

            relx_nodetool rpc yz_console aae_status "$@"
            ;;
        switch[_-]to[_-]new[_-]search)
            if [ $# -ne 1 ]; then
                echo "Usage: $SCRIPT search $1"
                exit 1
            fi
            shift

            # Make sure the local node is running

            relx_nodetool rpc yz_console switch_to_new_search "$@"
            ;;
        *)
echo "\
Usage: $SCRIPT search <command>

Available commands:

    aae-status
    switch-to-new-search
"
    esac
}

btype_admin()
{
    case "$1" in
        status)
            if [ $# -ne 2 ]; then
                echo "Usage: $SCRIPT bucket-type status <type>";
                exit 1
            fi
            relx_nodetool rpc riak_kv_console bucket_type_status "$2"
            ;;
        activate)
            if [ $# -ne 2 ]; then
                echo "Usage: $SCRIPT bucket-type activate <type>"
                exit 1
            fi
            relx_nodetool rpc riak_kv_console bucket_type_activate "$2"
            ;;
        create)
            if [ $# -lt 2 ]; then
                echo "Usage: $SCRIPT bucket-type create <type> ['{\"props\": { ... }}']"
                exit 1
            fi

            # Allow for both command line styles (quoted 3rd param) or $@ parameters
            #     bucket-type create <type> '{"props": { ... }}'"
            #     bucket-type create <type> {"props": { ... }}"
            #
            if [ $# -le 3 ]; then
                json=${3:-}
                relx_nodetool rpc riak_kv_console bucket_type_create "$2" "$json"
            else  # greater than 3 parameters
                two=$2
                shift 2
                three=$@
                relx_nodetool rpc riak_kv_console bucket_type_create "$two" "$three"
            fi

            ;;
        update)
            if [ $# -lt 3 ]; then
                echo "Usage: $SCRIPT bucket-type update <type> '{\"props\": { ... }}'"
                exit 1
            fi

            # Allow for both command line styles (quoted 3rd param) or $@ parameters
            #     bucket-type update <type> '{"props": { ... }}'"
            #     bucket-type update <type> {"props": { ... }}"
            #
            if [ $# -eq 3 ]; then
                relx_nodetool rpc riak_kv_console bucket_type_update "$2" "$3"
            else  # greater than 3 parameters
                two=$2
                shift 2
                three=$@
                relx_nodetool rpc riak_kv_console bucket_type_update "$two" "$three"
            fi
            ;;
        list)
            if [ $# -ne 1 ]; then
                echo "Usage: $SCRIPT bucket-type list"
                exit 1
            fi
            relx_nodetool rpc riak_kv_console bucket_type_list
            ;;
        *)
            echo "\
Usage: $SCRIPT bucket-type <command>

The follow commands can be used to manage bucket types for the cluster:

   list                           List all bucket types and their activation status
   status <type>                  Display the status and properties of a type
   activate <type>                Activate a type
   create <type> <json>           Create or modify a type before activation
   update <type> <json>           Update a type after activation
"
    esac
}

# Check the first argument for instructions
case "$1" in
    join)
        if [ "$2" != "-f" ]; then
            echo "The 'join' command has been deprecated in favor of the new "
            echo "clustering commands provided by '$SCRIPT cluster'. To continue "
            echo "using the deprecated 'join' command, use 'join -f'"
            exit 1
        fi

        if [ $# -ne 3 ]; then
            echo "Usage: $SCRIPT join -f <node>"
            exit 1
        fi

        # Make sure the local node IS running

        relx_nodetool rpc riak_kv_console join "$3"
        ;;

    leave)
        if [ "$2" != "-f" ]; then
            echo "The 'leave' command has been deprecated in favor of the new "
            echo "clustering commands provided by '$SCRIPT cluster'. To continue "
            echo "using the deprecated 'leave' command, use 'leave -f'"
            exit 1
        fi

        if [ $# -ne 2 ]; then
            echo "Usage: $SCRIPT leave -f"
            exit 1
        fi

        # Make sure the local node is running

        relx_nodetool rpc riak_kv_console leave
        ;;

    remove)
        echo "The 'remove' command no longer exists. If you want a node to"
        echo "safely leave the cluster (handoff its data before exiting),"
        echo "then execute 'leave' on the desired node. If a node is down and"
        echo "unrecoverable (and therefore cannot be safely removed), then"
        echo "use the 'force-remove' command. A force removal drops all data"
        echo "owned by the removed node. Read-repair can be used to restore"
        echo "lost replicas."
        exit 1
        ;;

    force[_-]remove)
        if [ "$2" != "-f" ]; then
            echo "The 'force-remove' command has been deprecated in favor of the new "
            echo "clustering commands provided by '$SCRIPT cluster'. To continue "
            echo "using the deprecated 'force-remove' command, use 'force-remove -f'"
            exit 1
        fi

        if [ $# -ne 3 ]; then
            echo "Usage: $SCRIPT force-remove -f <node>"
            exit 1
        fi

        # Make sure the local node is running

        relx_nodetool rpc riak_kv_console remove "$3"
        ;;

    down)
        if [ $# -ne 2 ]; then
            echo "Usage: $SCRIPT down <node>"
            exit 1
        fi
        shift

        # Make sure the local node is running

        relx_nodetool rpc riak_kv_console down "$@"
        ;;

    status)
        if [ $# -ne 1 ]; then
            echo "Usage: $SCRIPT status"
            exit 1
        fi
        shift

        # Make sure the local node is running

        relx_nodetool rpc riak_kv_console status "$@"
        ;;

    vnode[_-]status)
        if [ $# -ne 1 ]; then
            echo "Usage: $SCRIPT $1"
            exit 1
        fi
        shift

        # Make sure the local node is running

        relx_nodetool rpc riak_kv_console vnode_status "$@"
        ;;

    ringready)
        if [ $# -ne 1 ]; then
            echo "Usage: $SCRIPT ringready"
            exit 1
        fi
        shift

        # Make sure the local node is running

        relx_nodetool rpc riak_kv_console ringready "$@"
        ;;

    transfers)
        if [ $# -ne 1 ]; then
            echo "Usage: $SCRIPT transfers"
            exit 1
        fi
        shift

        # Make sure the local node is running

        relx_nodetool rpc riak_core_console transfers "$@"
        ;;

    member[_-]status)
        if [ $# -ne 1 ]; then
            echo "Usage: $SCRIPT $1"
            exit 1
        fi
        shift

        # Make sure the local node is running

        relx_nodetool rpc riak_core_console member_status "$@"
        ;;

    ring[_-]status)
        if [ $# -ne 1 ]; then
            echo "Usage: $SCRIPT $1"
            exit 1
        fi
        shift

        # Make sure the local node is running

        relx_nodetool rpc riak_core_console ring_status "$@"
        ;;

    aae[_-]status)
        if [ $# -ne 1 ]; then
            echo "Usage: $SCRIPT $1"
            exit 1
        fi
        shift

        # Make sure the local node is running

        relx_nodetool rpc riak_kv_console aae_status "$@"
        ;;

    ensemble[_-]status)
        if [ $# -ne 1 ] && [ $# -ne 2 ]; then
            echo "Usage: $SCRIPT $1 [<ensemble>]"
            exit 1
        fi
        shift

        # Make sure the local node is running

        relx_nodetool rpc riak_kv_console ensemble_status "$@"
        ;;

    repair[_-]2i)
        shift

        # Make sure the local node is running

        relx_nodetool rpc riak_kv_console repair_2i "$@"
        ;;

    cluster[_-]info)
        if [ $# -lt 2 ]; then
            echo "Usage: $SCRIPT $1 <output_file> ['local' | <node> ['local' | <node>] [...]]"
            exit 1
        fi
        shift

        # Make sure the local node is running

        relx_nodetool rpc_infinity riak_kv_console cluster_info "$@"
        ;;

    services)
        if [ $# -ne 1 ]; then
            echo "Usage: $SCRIPT $1"
            echo ""
            echo "Lists the services available on the node. See also: wait-for-service"
            exit 1
        fi
        relx_nodetool rpcterms riak_core_node_watcher services ''
        ;;

    wait[_-]for[_-]service)
        SVC=$2
        TARGETNODE=$3
        if [ $# -lt 2 ]; then
            echo "Usage: $SCRIPT $1 <service_name> [<target_node>]"
            exit 1
        fi

        while (true); do
            # Make sure riak_core_node_watcher is up and running locally before trying to query it
            # to avoid ugly (but harmless) error messages
            NODEWATCHER=`relx_nodetool rpcterms erlang whereis "'riak_core_node_watcher'."`
            if [ "$NODEWATCHER" = "undefined" ]; then
                echo "$SVC is not up: node watcher is not running"
                continue
            fi

            # Get the list of services that are available on the requested node
            # If no node is specified, get the list of services from the local node
            if [ "X$TARGETNODE" = "X" ]; then
                SERVICES=`relx_nodetool rpcterms riak_core_node_watcher services ''`
            else
                SERVICES=`relx_nodetool rpcterms riak_core_node_watcher services "'${TARGETNODE}'."`
            fi
            echo "$SERVICES" | grep "[[,]$SVC[],]" > /dev/null 2>&1
            if [ "X$?" = "X0" ]; then
                echo "$SVC is up"
                exit 0
            else
                echo "$SVC is not up: $SERVICES"
            fi
            sleep 3
        done
        ;;

    js[_-]reload)
        # Reload all Javascript VMs

        shift #optional names come after 'js_reload'

        # Make sure the local node is running

        relx_nodetool rpc riak_kv_js_manager reload "$@"
        ;;

    erl[_-]reload)
        # Reload user Erlang code
        # Make sure the local node is running

        relx_nodetool rpc riak_kv_console reload_code
        ;;

    reip)
        ACTION=$1
        shift
        if [ $# -lt 2 ]; then
            echo "Usage $SCRIPT $ACTION <old_nodename> <new_nodename>"
            exit 1
        fi

        # Make sure the local node is not running
        node_down_check

        # Sanity check the app.config file
        check_config
        ES=$?
        if [ "$ES" -ne 0 ]; then
            exit $ES
        fi

        OLDNODE=$1
        NEWNODE=$2
        $ERTS_PATH/erl -noshell \
            -pa $RUNNER_LIB_DIR/basho-patches \
            $CONFIG_ARGS \
            -eval "riak_kv_console:$ACTION(['$OLDNODE', '$NEWNODE'])" \
            -s init stop
        ;;

    restore)
        ACTION=$1
        shift

        if [ $# -lt 3 ]; then
            echo "Usage: $SCRIPT $ACTION <node> <cookie> <filename>"
            exit 1
        fi

        NODE=$1
        COOKIE=$2
        FILENAME=$3

        $ERTS_PATH/erl -noshell $NAME_PARAM riak_kv_backup$NAME_HOST -setcookie $COOKIE \
                       -pa $RUNNER_LIB_DIR/basho-patches \
                       -eval "riak_kv_backup:$ACTION('$NODE', \"$FILENAME\")" -s init stop
        ;;

    backup)
        ACTION=$1
        shift

        if [ $# -lt 4 ]; then
            echo "Usage: $SCRIPT $ACTION <node> <cookie> <filename> [node|all]"
            exit 1
        fi

        NODE=$1
        COOKIE=$2
        FILENAME=$3
        TYPE=$4

        $ERTS_PATH/erl -noshell $NAME_PARAM riak_kv_backup$NAME_HOST -setcookie $COOKIE \
                       -pa $RUNNER_LIB_DIR/basho-patches \
                       -eval "riak_kv_backup:$ACTION('$NODE', \"$FILENAME\", \"$TYPE\")" -s init stop
        ;;

    test)
        # Make sure the local node IS running

        shift

        # Parse out the node name to pass to the client
        NODE_NAME=${NAME_ARG#* }

        $ERTS_PATH/erl -noshell $NAME_PARAM riak_test$NAME_HOST $COOKIE_ARG \
                       -pa $RUNNER_LIB_DIR/basho-patches \
                       -eval "case catch(riak:client_test(\"$NODE_NAME\")) of \
                               ok -> init:stop();                             \
                               _  -> init:stop(1)                             \
                              end."

        ;;
    diag)
        case "$2" in
            --help|-h)
                echo "Usage: riak-admin diag [-d <level>] [-l] [-h] [--export] [check_name ...]"
                echo ""
                echo "-h, --help            Display help/usage dialogue"
                echo "-d, --level           Minimum message severity level (default: notice)"
                echo "-l, --list            Describe available diagnostic tasks"
                echo "--export              Package system info in '$CWD/export.zip'"
                echo "check_name            A specific check to run"
                exit 1
                ;;
            *)

                shift

                relx_nodetool rpc riaknostic main --etc "$RUNNER_ETC_DIR" --base "$RUNNER_BASE_DIR" "$@"
        esac
        ;;
    top)
        # Make sure the local node IS running

        shift

        RAND=$(($(($$ % 1000)) + 1))
        NODE_NAME=${NAME_ARG#* }
        # Using np_etop instead of riak_etop to follow node_package convention
        $ERTS_PATH/erl -noshell -noinput \
            -pa $RUNNER_LIB_DIR/basho-patches \
            -hidden $NAME_PARAM np_etop$RAND$NAME_HOST $COOKIE_ARG \
            -s etop -s erlang halt -output text \
            -node $NODE_NAME \
            $* -tracing off
        ;;
    cluster)
        shift
        cluster_admin "$@"
        ;;
    stat)
        shift
        stat_admin "$@"
        ;;
    profile)
        shift
        profile_admin "$@"
        ;;
    push)
        shift
        push_admin "$@"
        ;;
    bucket-type)
        shift
        btype_admin "$@"
        ;;
    handoff)
        # New pattern for command line. Use nodetool for RPC
        relx_nodetool rpc riak_core_console command $SCRIPT $@
        ;;
    set)
        # New pattern for command line. Use nodetool for RPC
        relx_nodetool rpc riak_core_console command $SCRIPT $@
        ;;
    show)
        # New pattern for command line. Use nodetool for RPC
        relx_nodetool rpc riak_core_console command $SCRIPT $@
        ;;
    describe)
        # New pattern for command line. Use nodetool for RPC
        relx_nodetool rpc riak_core_console command $SCRIPT $@
        ;;
    transfer[_-]limit)
        if [ $# -gt 3 ]; then
            echo "Usage: $SCRIPT $1"
            echo "       $SCRIPT $1 <limit>"
            echo "       $SCRIPT $1 <node> <limit>"
            exit
        fi
        shift
        relx_nodetool rpc riak_core_console transfer_limit "$@"
        ;;
    reformat[_-]indexes)
        if [ $# -gt 4 ]; then
            echo "Usage: $SCRIPT $1"
            echo "       $SCRIPT $1 --downgrade"
            echo "       $SCRIPT $1 <concurrency> [--downgrade]"
            echo "       $SCRIPT $1 <concurrency> <batch size> [--downgrade]"
            exit 1
        fi
        shift
        relx_nodetool rpc riak_kv_console reformat_indexes "$@"
        ;;
    downgrade[_-]objects)
        if [ $# -lt 2 ]; then
            echo "Usage: $SCRIPT $1 <kill-handoffs> [<concurrency>]"
            exit
        fi
        shift
        relx_nodetool rpc riak_kv_console reformat_objects "$@"
        ;;
    security)
        shift
        security_admin "$@"
        ;;
    search)
        shift
        search_admin "$@"
        ;;
    *)
        usage
        exit 1
        ;;
esac

# No explicit exit from within script or nodetool, assumed to have succeeded.
exit 0
